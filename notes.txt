Course details: https://app.pluralsight.com/course-player?clipId=a50dc0e9-0a7a-4f03-a8fb-94ca5cd85064

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>runtime</scope>
</dependency>


1) add to application.properties

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

2) create ConferenceSecurityConfig.java

@Configuration
@EnableWebSecurity
public class ConferenceSecurityConfig extends WebSecurityConfigurerAdapter {

3) switch builder

auth.jdbcAuthentication()
              .dataSource(dataSource);

4) docker-compose



4) mysql workbench

Schema spring docs:
https://docs.spring.io/spring-security/site/docs/3.0.x/reference/appendix-schema.html#:~:text=There%20are%20four%20tables%20used,types%20to%20which%20ACLs%20apply.

STATEMENT 1:

CREATE TABLE users (
  username VARCHAR(50) NOT NULL,
  password VARCHAR(100) NOT NULL,
  enabled TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (username)
);

STATEMENT 2:

CREATE TABLE authorities (
  username VARCHAR(50) NOT NULL,
  authority VARCHAR(50) NOT NULL,
  FOREIGN KEY (username) REFERENCES users(username)
);

STATEMENT 3:

CREATE UNIQUE INDEX ix_auth_username
  on authorities (username,authority);

STATEMENT 4:

  //Use test class to get encrypted password

  INSERT INTO users (username, password, enabled)
  values ('bryan',
    '$2a$10$a07FaSKwo2xAwEj4UJYa0etu8sY5o9onG/0psQ2FxzjviueQUYnbm',
    1);

STATEMENT 5:

INSERT INTO authorities (username, authority)
  values ('bryan', 'ROLE_USER');

STATEMENT 6:

commit;

STATEMENT 7: (ALERT: THIS IS ONLY FOR CUSTOM USER)
Adding nickname columns to users table

STATEMENT 8: (For Remember me functionality -> PersistentTokenRepository)

 create table persistent_logins(
 username varchar(50) not null,
 series varchar(64) primary key,
 token varchar(64) not null,
 last_used timestamp not null,
 foreign key(username) references users(username)
 );

 STATEMENT 9: (For registration functionality)

  create table accounts (
  username varchar(50) not null,
  password varchar(100) not null,
  email varchar(100) not null,
  firstname varchar(50) not null,
  lastname varchar(50) not null,
  primary key(username)
  );

  STATEMENT 10: (For registration functionality)
   create table verification_tokens(
    username varchar(50) not null,
  token varchar(100) not null,
  expiry_date DATETIME not null,
  primary key(username, token)
   );

   STATEMENT 11: (For password reset)
   CREATE TABLE `reset_tokens` (
    `email` varchar(100) not null,
     `username` varchar(50) NOT NULL,
     `token` varchar(100) NOT NULL,
     `expiry_date` datetime NOT NULL,
     PRIMARY KEY (`email`,`token`)
   ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

<dependency>
    <groupId>org.springframework.ldap</groupId>
    <artifactId>spring-ldap-core</artifactId>
</dependency>

<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-ldap</artifactId>
</dependency>

<dependency>
    <groupId>com.unboundid</groupId>
    <artifactId>unboundid-ldapsdk</artifactId>
</dependency>

auth
                .ldapAuthentication()
                .userDnPatterns("uid={0},ou=people")
                .groupSearchBase("ou=groups")
                .contextSource()
                .url("ldap://localhost:8389/dc=pluralsight,dc=com")
                .and()
                .passwordCompare()
                .passwordEncoder(passwordEncoder())
                .passwordAttribute("userPassword");
